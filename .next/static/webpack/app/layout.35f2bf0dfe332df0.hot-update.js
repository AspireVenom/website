"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./components/InitClient.tsx":
/*!***********************************!*\
  !*** ./components/InitClient.tsx ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ InitClient; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var aos__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! aos */ \"(app-pages-browser)/./node_modules/aos/dist/aos.js\");\n/* harmony import */ var aos__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(aos__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ var _s = $RefreshSig$();\n\n\nfunction isHTMLElement(el) {\n    return !!el && el instanceof HTMLElement;\n}\nfunction InitClient() {\n    _s();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        // Initialize AOS\n        aos__WEBPACK_IMPORTED_MODULE_1___default().init({\n            duration: 1000,\n            easing: \"ease-out-cubic\",\n            offset: 100,\n            once: true\n        });\n        // Typing intro and mobile variant\n        const intro = document.querySelector(\".intro\");\n        const cursor = document.getElementById(\"cursor\");\n        const isMobile = window.innerWidth <= 768;\n        function moveCursorTo(el) {\n            if (!isHTMLElement(cursor) || !isHTMLElement(intro)) return;\n            const rect = el.getBoundingClientRect();\n            const introRect = intro.getBoundingClientRect();\n            cursor.style.top = \"\".concat(rect.top - introRect.top, \"px\");\n            cursor.style.left = \"\".concat(rect.left - introRect.left + rect.width + 2, \"px\");\n        }\n        const timeouts = [];\n        if (!isMobile) {\n            const line1 = document.getElementById(\"line1\");\n            const line2 = document.getElementById(\"line2\");\n            const line1Text = \"Douglas Alvarino\";\n            const line2Text = \"Engineer || Developer || Explorer\";\n            let i = 0;\n            let j = 0;\n            // Reset any pre-existing content to avoid doubled characters on HMR/remount\n            if (line1) line1.textContent = \"\";\n            if (line2) line2.textContent = \"\";\n            function typeLine1() {\n                if (!line1) return;\n                if (i < line1Text.length) {\n                    line1.textContent = (line1.textContent || \"\") + line1Text.charAt(i);\n                    moveCursorTo(line1);\n                    i++;\n                    timeouts.push(window.setTimeout(typeLine1, 80));\n                } else {\n                    timeouts.push(window.setTimeout(typeLine2, 400));\n                }\n            }\n            function typeLine2() {\n                if (!line2) return;\n                if (j < line2Text.length) {\n                    line2.textContent = (line2.textContent || \"\") + line2Text.charAt(j);\n                    moveCursorTo(line2);\n                    j++;\n                    timeouts.push(window.setTimeout(typeLine2, 80));\n                }\n            }\n            timeouts.push(window.setTimeout(typeLine1, 350));\n        }\n        if (isMobile && isHTMLElement(intro) && isHTMLElement(cursor)) {\n            var _document_getElementById, _document_getElementById1;\n            (_document_getElementById = document.getElementById(\"line1-container\")) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.remove();\n            (_document_getElementById1 = document.getElementById(\"line2-container\")) === null || _document_getElementById1 === void 0 ? void 0 : _document_getElementById1.remove();\n            const mobileLines = [\n                \"Douglas Alvarino\",\n                \"Engineer\",\n                \"Developer\",\n                \"Explorer\"\n            ];\n            let currentLine = 0;\n            let charIndex = 0;\n            const lineSpans = [];\n            const promptSpans = [];\n            for(let i = 0; i < mobileLines.length; i++){\n                const lineDiv = document.createElement(\"div\");\n                lineDiv.className = \"terminal-line\";\n                const promptSpan = document.createElement(\"span\");\n                promptSpan.className = \"prompt\";\n                promptSpan.textContent = \"\";\n                promptSpans.push(promptSpan);\n                const span = document.createElement(\"span\");\n                span.id = \"mobile-line-\".concat(i);\n                lineSpans.push(span);\n                lineDiv.appendChild(promptSpan);\n                lineDiv.appendChild(span);\n                intro.insertBefore(lineDiv, cursor);\n            }\n            function typeMobileLine() {\n                if (currentLine >= mobileLines.length) return;\n                const prompt = promptSpans[currentLine];\n                const span = lineSpans[currentLine];\n                const text = mobileLines[currentLine];\n                function typePrompt() {\n                    prompt.textContent = \"> \";\n                    moveCursorTo(prompt);\n                    timeouts.push(window.setTimeout(typeWord, 180));\n                }\n                function typeWord() {\n                    if (charIndex < text.length) {\n                        span.textContent = (span.textContent || \"\") + text.charAt(charIndex);\n                        moveCursorTo(span);\n                        charIndex++;\n                        timeouts.push(window.setTimeout(typeWord, 80));\n                    } else {\n                        currentLine++;\n                        charIndex = 0;\n                        timeouts.push(window.setTimeout(typeMobileLine, 300));\n                    }\n                }\n                typePrompt();\n            }\n            timeouts.push(window.setTimeout(typeMobileLine, 350));\n        }\n        // Scroll cue\n        const cue = document.getElementById(\"scroll-cue\");\n        const aboutSection = document.getElementById(\"about\");\n        let scrolled = false;\n        function scrollToAbout() {\n            if (!scrolled && isHTMLElement(aboutSection)) {\n                scrolled = true;\n                aboutSection.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            }\n        }\n        cue === null || cue === void 0 ? void 0 : cue.addEventListener(\"click\", scrollToAbout);\n        const onWheel = (e)=>{\n            if (e.deltaY > 0) scrollToAbout();\n        };\n        window.addEventListener(\"wheel\", onWheel, {\n            passive: true\n        });\n        // Navbar hamburger toggle\n        const hamburger = document.getElementById(\"hamburger\");\n        const navLinks = document.getElementById(\"nav-links\");\n        const onHamburger = ()=>{\n            hamburger === null || hamburger === void 0 ? void 0 : hamburger.classList.toggle(\"active\");\n            navLinks === null || navLinks === void 0 ? void 0 : navLinks.classList.toggle(\"show\");\n        };\n        hamburger === null || hamburger === void 0 ? void 0 : hamburger.addEventListener(\"click\", onHamburger);\n        navLinks === null || navLinks === void 0 ? void 0 : navLinks.querySelectorAll(\"a\").forEach((link)=>{\n            link.addEventListener(\"click\", ()=>{\n                if (window.innerWidth <= 768) {\n                    navLinks.classList.remove(\"show\");\n                    hamburger === null || hamburger === void 0 ? void 0 : hamburger.classList.remove(\"active\");\n                }\n            });\n        });\n        // Skills carousel and filters\n        const skillsCarousel = document.getElementById(\"skills-carousel\");\n        const skillsCategories = document.getElementById(\"skills-categories\");\n        const carouselWrapper = document.querySelector(\".carousel-skill-card-wrapper\");\n        const leftArrow = document.getElementById(\"carousel-left\");\n        const rightArrow = document.getElementById(\"carousel-right\");\n        const filterBar = document.getElementById(\"skills-filter\");\n        const filterButtons = Array.from(document.querySelectorAll(\".filter-btn\"));\n        let allSkillCards = Array.from(document.querySelectorAll(\".skill-card\")).map((card)=>card.cloneNode(true));\n        let carouselIndex = 0;\n        function showCarouselSkill(idx) {\n            if (!carouselWrapper) return;\n            carouselWrapper.innerHTML = \"\";\n            const card = allSkillCards[idx];\n            if (card) {\n                carouselWrapper.appendChild(card);\n                const progressBar = card.querySelector(\".progress-bar\");\n                if (progressBar) {\n                    const progress = card.dataset.level || \"0\";\n                    progressBar.style.setProperty(\"--progress-width\", \"\".concat(progress, \"%\"));\n                    card.classList.add(\"animate\");\n                    setTimeout(()=>{\n                        progressBar.style.width = \"\".concat(progress, \"%\");\n                    }, 100);\n                }\n            }\n            leftArrow === null || leftArrow === void 0 ? void 0 : leftArrow.toggleAttribute(\"disabled\", idx === 0);\n            rightArrow === null || rightArrow === void 0 ? void 0 : rightArrow.toggleAttribute(\"disabled\", idx === allSkillCards.length - 1);\n        }\n        function activateCarousel() {\n            allSkillCards = Array.from(document.querySelectorAll(\".skill-card\")).map((card)=>card.cloneNode(true));\n            if (skillsCarousel) skillsCarousel.style.display = \"\";\n            skillsCategories === null || skillsCategories === void 0 ? void 0 : skillsCategories.classList.add(\"hide\");\n            carouselIndex = 0;\n            showCarouselSkill(carouselIndex);\n        }\n        function deactivateCarousel() {\n            if (skillsCarousel) skillsCarousel.style.display = \"none\";\n            skillsCategories === null || skillsCategories === void 0 ? void 0 : skillsCategories.classList.remove(\"hide\");\n        }\n        leftArrow === null || leftArrow === void 0 ? void 0 : leftArrow.addEventListener(\"click\", ()=>{\n            if (carouselIndex > 0) {\n                carouselIndex--;\n                showCarouselSkill(carouselIndex);\n            }\n        });\n        rightArrow === null || rightArrow === void 0 ? void 0 : rightArrow.addEventListener(\"click\", ()=>{\n            if (carouselIndex < allSkillCards.length - 1) {\n                carouselIndex++;\n                showCarouselSkill(carouselIndex);\n            }\n        });\n        let skillsStartX = 0;\n        let skillsSwiping = false;\n        carouselWrapper === null || carouselWrapper === void 0 ? void 0 : carouselWrapper.addEventListener(\"touchstart\", (e)=>{\n            skillsStartX = e.touches[0].clientX;\n            skillsSwiping = true;\n        });\n        carouselWrapper === null || carouselWrapper === void 0 ? void 0 : carouselWrapper.addEventListener(\"touchmove\", (e)=>{\n            if (!skillsSwiping) return;\n            const diffX = e.touches[0].clientX - skillsStartX;\n            if (Math.abs(diffX) > 50) {\n                if (diffX < 0 && carouselIndex < allSkillCards.length - 1) {\n                    carouselIndex++;\n                    showCarouselSkill(carouselIndex);\n                } else if (diffX > 0 && carouselIndex > 0) {\n                    carouselIndex--;\n                    showCarouselSkill(carouselIndex);\n                }\n                skillsSwiping = false;\n            }\n        });\n        carouselWrapper === null || carouselWrapper === void 0 ? void 0 : carouselWrapper.addEventListener(\"touchend\", ()=>{\n            skillsSwiping = false;\n        });\n        filterBar === null || filterBar === void 0 ? void 0 : filterBar.addEventListener(\"click\", (e)=>{\n            const target = e.target;\n            if (!target.classList.contains(\"filter-btn\")) return;\n            filterButtons.forEach((btn)=>btn.classList.remove(\"active\"));\n            target.classList.add(\"active\");\n            const filter = target.dataset.filter;\n            if (filter === \"all\") {\n                activateCarousel();\n            } else {\n                deactivateCarousel();\n                document.querySelectorAll(\".skill-category\").forEach((cat)=>{\n                    cat.style.display = cat.dataset.category === filter ? \"\" : \"none\";\n                });\n                document.querySelectorAll(\".skill-category\").forEach((cat)=>{\n                    if (cat.style.display !== \"none\") {\n                        cat.querySelectorAll(\".skill-card\").forEach((card)=>{\n                            const progressBar = card.querySelector(\".progress-bar\");\n                            const progress = card.dataset.level || \"0\";\n                            if (progressBar) {\n                                progressBar.style.width = \"0%\";\n                                progressBar.style.setProperty(\"--progress-width\", \"\".concat(progress, \"%\"));\n                                card.classList.remove(\"animate\");\n                                progressBar.getBoundingClientRect();\n                                card.classList.add(\"animate\");\n                                setTimeout(()=>{\n                                    progressBar.style.width = \"\".concat(progress, \"%\");\n                                }, 100);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n        const programmingBtn = filterButtons.find((btn)=>btn.dataset.filter === \"programming\");\n        if (programmingBtn) setTimeout(()=>programmingBtn.click(), 0);\n        // Highlight projects carousel\n        const track = document.querySelector(\".carousel-track\");\n        const nodes = Array.from(document.querySelectorAll(\".highlight-node\"));\n        const prevBtn = document.getElementById(\"carousel-prev\");\n        const nextBtn = document.getElementById(\"carousel-next\");\n        let currentIndex = 0;\n        let slideWidth = 0;\n        let gapPx = 0;\n        function measureSlides() {\n            if (!track || nodes.length === 0) return;\n            slideWidth = nodes[0].getBoundingClientRect().width;\n            const styles = window.getComputedStyle(track);\n            // gap may be like \"16px\"\n            const parsed = parseFloat(styles.gap || \"0\");\n            gapPx = Number.isNaN(parsed) ? 0 : parsed;\n        }\n        function applySlideClasses() {\n            nodes.forEach((node, idx)=>{\n                const isActive = idx === currentIndex;\n                const isNear = idx === currentIndex - 1 || idx === currentIndex + 1;\n                const isFar = Math.abs(idx - currentIndex) > 1;\n                node.classList.toggle(\"slide--active\", isActive);\n                node.classList.toggle(\"slide--near\", isNear);\n                node.classList.toggle(\"slide--far\", isFar);\n            });\n        }\n        function updateCarousel() {\n            if (!track) return;\n            const offsetPx = -(slideWidth + gapPx) * currentIndex;\n            track.style.transform = \"translateX(\".concat(offsetPx, \"px)\");\n            applySlideClasses();\n        }\n        prevBtn === null || prevBtn === void 0 ? void 0 : prevBtn.addEventListener(\"click\", ()=>{\n            if (currentIndex > 0) {\n                currentIndex--;\n                updateCarousel();\n            }\n        });\n        nextBtn === null || nextBtn === void 0 ? void 0 : nextBtn.addEventListener(\"click\", ()=>{\n            if (currentIndex < nodes.length - 1) {\n                currentIndex++;\n                updateCarousel();\n            }\n        });\n        let projectStartX = 0;\n        let projectSwiping = false;\n        track === null || track === void 0 ? void 0 : track.addEventListener(\"touchstart\", (e)=>{\n            projectStartX = e.touches[0].clientX;\n            projectSwiping = true;\n        });\n        track === null || track === void 0 ? void 0 : track.addEventListener(\"touchmove\", (e)=>{\n            if (!projectSwiping) return;\n            const diffX = e.touches[0].clientX - projectStartX;\n            if (Math.abs(diffX) > 50) {\n                if (diffX < 0 && currentIndex < nodes.length - 1) currentIndex++;\n                else if (diffX > 0 && currentIndex > 0) currentIndex--;\n                updateCarousel();\n                projectSwiping = false;\n            }\n        });\n        track === null || track === void 0 ? void 0 : track.addEventListener(\"touchend\", ()=>{\n            projectSwiping = false;\n        });\n        activateCarousel();\n        measureSlides();\n        updateCarousel();\n        const onResizeCarousel = ()=>{\n            measureSlides();\n            updateCarousel();\n        };\n        window.addEventListener(\"resize\", onResizeCarousel);\n        // Navbar hide/show on scroll\n        let lastScrollTop = 0;\n        const navbar = document.querySelector(\".navbar\");\n        const onScroll = ()=>{\n            const scrollTop = window.scrollY || document.documentElement.scrollTop;\n            if (scrollTop > lastScrollTop) navbar === null || navbar === void 0 ? void 0 : navbar.classList.add(\"navbar-hidden\");\n            else navbar === null || navbar === void 0 ? void 0 : navbar.classList.remove(\"navbar-hidden\");\n            lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;\n        };\n        window.addEventListener(\"scroll\", onScroll, {\n            passive: true\n        });\n        // Matrix background canvas under #landing\n        const landingEl = document.getElementById(\"landing\");\n        if (landingEl) {\n            const matrixCanvas = document.createElement(\"canvas\");\n            const landing = landingEl; // narrow for inner closures\n            landing.style.position = \"relative\";\n            landing.appendChild(matrixCanvas);\n            const ctx = matrixCanvas.getContext(\"2d\");\n            if (!ctx) {\n                // Cleanup fallback\n                return ()=>{\n                    window.removeEventListener(\"wheel\", onWheel);\n                    window.removeEventListener(\"scroll\", onScroll);\n                    hamburger === null || hamburger === void 0 ? void 0 : hamburger.removeEventListener(\"click\", onHamburger);\n                };\n            }\n            const context = ctx;\n            // Style assignments\n            matrixCanvas.style.position = \"absolute\";\n            matrixCanvas.style.top = \"0\";\n            matrixCanvas.style.left = \"0\";\n            matrixCanvas.style.width = \"100%\";\n            matrixCanvas.style.height = \"100%\";\n            matrixCanvas.style.zIndex = \"0\";\n            matrixCanvas.style.pointerEvents = \"none\";\n            matrixCanvas.style.opacity = \"0.08\";\n            matrixCanvas.style.transition = \"opacity 0.3s ease\";\n            const letters = \"01アカサタナハマヤラ0123456789\";\n            const fontSize = 14;\n            let drops = [];\n            let lastWidth = 0;\n            let lastHeight = 0;\n            function resizeMatrixCanvas() {\n                let force = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n                const width = landing.clientWidth;\n                const height = window.innerHeight;\n                if (!force && width === lastWidth && height === lastHeight) return;\n                const oldColumns = drops.length;\n                const newColumns = Math.floor(width / fontSize);\n                if (matrixCanvas.width !== width) matrixCanvas.width = width;\n                if (matrixCanvas.height !== height) matrixCanvas.height = height;\n                if (newColumns !== oldColumns) {\n                    const oldDrops = [\n                        ...drops\n                    ];\n                    drops.length = newColumns;\n                    for(let i = 0; i < newColumns; i++){\n                        drops[i] = oldDrops[i] || 1;\n                    }\n                }\n                context.font = \"14px 'Courier New', monospace\";\n                lastWidth = width;\n                lastHeight = height;\n            }\n            function drawMatrix() {\n                context.fillStyle = \"rgba(0, 0, 0, 0.05)\";\n                context.fillRect(0, 0, matrixCanvas.width, matrixCanvas.height);\n                context.fillStyle = \"#0f0\";\n                for(let i = 0; i < drops.length; i++){\n                    const text = letters.charAt(Math.floor(Math.random() * letters.length));\n                    context.fillText(text, i * fontSize, drops[i] * fontSize);\n                    if (drops[i] * fontSize > matrixCanvas.height || Math.random() > 0.975) {\n                        drops[i] = 0;\n                    }\n                    drops[i]++;\n                }\n            }\n            resizeMatrixCanvas(true);\n            const interval = window.setInterval(drawMatrix, 50);\n            let resizeTimeout;\n            const onResize = ()=>{\n                window.clearTimeout(resizeTimeout);\n                resizeTimeout = window.setTimeout(()=>resizeMatrixCanvas(), 200);\n            };\n            window.addEventListener(\"resize\", onResize);\n            // Cleanup canvas listeners/interval\n            return ()=>{\n                timeouts.forEach((id)=>window.clearTimeout(id));\n                window.removeEventListener(\"resize\", onResize);\n                window.removeEventListener(\"resize\", onResizeCarousel);\n                window.removeEventListener(\"wheel\", onWheel);\n                window.removeEventListener(\"scroll\", onScroll);\n                hamburger === null || hamburger === void 0 ? void 0 : hamburger.removeEventListener(\"click\", onHamburger);\n                window.clearInterval(interval);\n            };\n        }\n        // Cleanup for non-canvas case\n        return ()=>{\n            timeouts.forEach((id)=>window.clearTimeout(id));\n            window.removeEventListener(\"wheel\", onWheel);\n            window.removeEventListener(\"scroll\", onScroll);\n            window.removeEventListener(\"resize\", onResizeCarousel);\n            hamburger === null || hamburger === void 0 ? void 0 : hamburger.removeEventListener(\"click\", onHamburger);\n        };\n    }, []);\n    return null;\n}\n_s(InitClient, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = InitClient;\nvar _c;\n$RefreshReg$(_c, \"InitClient\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/InitClient.tsx\n"));

/***/ })

});