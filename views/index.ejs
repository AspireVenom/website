<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="icon" href="/images/favicon.ico" type="image/x-icon" sizes="32x32">
  <title>Douglas Alvarino</title>
  <!-- SEO Meta Tags -->
  <meta name="description" content="Douglas Alvarino – Full-stack developer and cybersecurity student building modern, AI-powered tools with Rust, React, and Python.">
  <meta name="keywords" content="Douglas Alvarino, Rust developer, React developer, cybersecurity portfolio, AI tools, SwipeToAdopt, Vimurai, full-stack engineer">
  <meta name="author" content="Douglas Alvarino">
  <!-- Open Graph Meta Tags -->
  <meta property="og:title" content="Douglas Alvarino – Developer Portfolio" />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://www.dalvarino.net/" />
  <meta property="og:image" content="https://www.dalvarino.net/images/preview.png" />
  <meta property="og:description" content="Explore my Rust, React, and AI projects. From SwipeToAdopt to Vimurai, see how I build with purpose and precision." />
  <meta property="og:site_name" content="dalvarino.net" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="/css/style.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;600&display=swap" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" rel="stylesheet">
  </style>
</head>
<body>
<section id="landing" class="landing">
  <div class="intro">
    <div class="terminal-line" id="line1-container">
      <span class="prompt">&gt; </span><span id="line1"></span>
    </div>
    <div class="terminal-line" id="line2-container" style="opacity: 0;">
      <span class="prompt">&gt; </span><span id="line2"></span>
    </div>
    <span class="cursor" id="cursor">_</span>
  </div>
  <div class="scroll-cue" id="scroll-cue">↓</div>
</section>
<%- include('partials/header') %>
<section id="about" data-aos="fade-up">
  <div class="about-card">
    <h2>About Me</h2>
    <p>
      I'm Douglas Alvarino — a product developer and cybersecurity student with over three years of hands-on
      experience in software engineering, specializing in Python, JavaScript, and AI training systems. My background
      combines technical support, agile development, and real-world application of data analysis to
      drive both product quality and user engagement. From building Elo-based sports analytics tools to contributing
      to open-source machine learning projects, I'm passionate about delivering innovative solutions that bridge data
      and usability. With a strong foundation in troubleshooting, project management, and secure
      systems, I'm committed to evolving as a developer who builds resilient, intelligent, and user-focused technology.
    </p>
  </div>
</section>

<section id="strengths" data-aos="fade-up">
  <div class="strengths-wrapper">
    <div class="strength-card">
      <h3>Rust Systems</h3>
      <p>I develop high-throughput backend systems in Rust using Axum, implementing features such as API response caching, asynchronous task orchestration, and multithreaded data pipelines.</p>
    </div>
    <div class="strength-card">
      <h3>AI & Tooling</h3>
      <p> Engineered machine learning–powered developer tools, including an AI-driven Neovim plugin leveraging LLMs for contextual code understanding and inline diff visualization.</p>
    </div>
  </div>

  <div class="strengths-pathline">
    <div class="dot"></div>
    <div class="line"></div>
    <div class="arrow">↓</div>
  </div>
</section>
<!--Experience-->
<!-- Experience Roadmap -->
<h2 class="experience-headline" data-aos="fade-down" data-aos-duration="1000">Experience</h2>
<div class="experience-roadmap" data-aos="fade-up">
  <div class="exp-card">
    <div class="exp-header">
      <div class="exp-dot"></div>
      <div>
        <h3>Junior Software Engineer</h3>
        <span class="exp-company">EOS Fitness, Tampa, FL</span>
      </div>
    </div>
    <div class="exp-timeline">
      <div class="exp-item">
        <div class="exp-dot"></div>
        <div class="exp-desc">Implemented automated SMS/email reminders that increased client return rates by <span class="exp-highlight">25%</span></div>
      </div>
      <div class="exp-item">
        <div class="exp-dot"></div>
        <div class="exp-desc">Drove <span class="exp-highlight">15%</span> boost in event attendance through multi-channel outreach strategies</div>
      </div>
      <div class="exp-item">
        <div class="exp-dot"></div>
        <div class="exp-desc">Reduced scheduling complaints by <span class="exp-highlight">40%</span> by optimizing calendar software usage</div>
      </div>
      <div class="exp-item">
        <div class="exp-dot"></div>
        <div class="exp-desc">Created goal-specific programs that led to <span class="exp-highlight">80+</span> client sign-ups in Q1 2025</div>
      </div>
    </div>
    <div class="exp-to-skills">
      <div class="exp-line"></div>
      <div class="exp-arrow">↓</div>
    </div>
  </div>
</div>

<!-- Skills -->
<div class="resume-right">
  <h2 class="skills-headline">Skills</h2>
  <div class="skills-filter" id="skills-filter">
    <button class="filter-btn" data-filter="all">All Skills</button>
    <button class="filter-btn active" data-filter="programming">Programming</button>
    <button class="filter-btn" data-filter="tools">Tools & Frameworks</button>
    <button class="filter-btn" data-filter="soft">Soft Skills</button>
  </div>
  <div class="skills-visualization">
    <!-- Carousel for All Skills -->
    <div class="skills-carousel" id="skills-carousel" style="display:none;">
      <button class="carousel-arrow left" id="carousel-left">&#8592;</button>
      <div class="carousel-skill-card-wrapper">
        <!-- Skill card will be injected here -->
      </div>
      <button class="carousel-arrow right" id="carousel-right">&#8594;</button>
    </div>
    <!-- Category display for filtered skills -->
    <div class="skills-categories" id="skills-categories">
      <div class="skill-category" data-category="programming">
        <h3><i class="fas fa-code"></i> Programming</h3>
        <div class="skill-grid">
          <div class="skill-card" data-skill="Python" data-level="90" data-projects="EloSystem, SMS Automator">
            <div class="skill-header">
              <span class="skill-name">Python</span>
              <span class="skill-level">90%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="90"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: EloSystem, SMS Automator</small>
            </div>
          </div>
          <div class="skill-card" data-skill="JavaScript" data-level="85" data-projects="AI Trainer, Portfolio">
            <div class="skill-header">
              <span class="skill-name">JavaScript</span>
              <span class="skill-level">85%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="85"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: AI Trainer, Portfolio</small>
            </div>
          </div>
          <div class="skill-card" data-skill="TypeScript" data-level="75" data-projects="SwipeToAdopt">
            <div class="skill-header">
              <span class="skill-name">TypeScript</span>
              <span class="skill-level">75%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="75"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: SwipeToAdopt</small>
            </div>
          </div>
          <div class="skill-card" data-skill="Rust" data-level="80" data-projects="SwipeToAdopt">
            <div class="skill-header">
              <span class="skill-name">Rust</span>
              <span class="skill-level">80%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="80"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: SwipeToAdopt</small>
            </div>
          </div>
          <div class="skill-card" data-skill="C" data-level="70" data-projects="Systems Programming">
            <div class="skill-header">
              <span class="skill-name">C</span>
              <span class="skill-level">70%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="70"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: Systems Programming</small>
            </div>
          </div>
        </div>
      </div>
      <div class="skill-category" data-category="tools">
        <h3><i class="fas fa-tools"></i> Tools & Frameworks</h3>
        <div class="skill-grid">
          <div class="skill-card" data-skill="React" data-level="85" data-projects="SwipeToAdopt, AI Trainer">
            <div class="skill-header">
              <span class="skill-name">React</span>
              <span class="skill-level">85%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="85"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: SwipeToAdopt, AI Trainer</small>
            </div>
          </div>
          <div class="skill-card" data-skill="Firebase" data-level="80" data-projects="AI Trainer">
            <div class="skill-header">
              <span class="skill-name">Firebase</span>
              <span class="skill-level">80%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="80"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: AI Trainer</small>
            </div>
          </div>
          <div class="skill-card" data-skill="PyTorch" data-level="75" data-projects="EloSystem">
            <div class="skill-header">
              <span class="skill-name">PyTorch</span>
              <span class="skill-level">75%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="75"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: EloSystem</small>
            </div>
          </div>
          <div class="skill-card" data-skill="Git" data-level="90" data-projects="All Projects">
            <div class="skill-header">
              <span class="skill-name">Git</span>
              <span class="skill-level">90%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="90"></div>
            </div>
            <div class="skill-projects">
              <small>Used in: All Projects</small>
            </div>
          </div>
        </div>
      </div>
      <div class="skill-category" data-category="soft">
        <h3><i class="fas fa-users"></i> Soft Skills</h3>
        <div class="skill-grid">
          <div class="skill-card" data-skill="Agile Methodologies" data-level="85" data-projects="Team Projects">
            <div class="skill-header">
              <span class="skill-name">Agile</span>
              <span class="skill-level">85%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="85"></div>
            </div>
            <div class="skill-projects">
              <small>Applied in: Team Projects</small>
            </div>
          </div>
          <div class="skill-card" data-skill="Project Management" data-level="80" data-projects="All Projects">
            <div class="skill-header">
              <span class="skill-name">Project Management</span>
              <span class="skill-level">80%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="80"></div>
            </div>
            <div class="skill-projects">
              <small>Applied in: All Projects</small>
            </div>
          </div>
          <div class="skill-card" data-skill="Problem Solving" data-level="90" data-projects="All Projects">
            <div class="skill-header">
              <span class="skill-name">Problem Solving</span>
              <span class="skill-level">90%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="90"></div>
            </div>
            <div class="skill-projects">
              <small>Applied in: All Projects</small>
            </div>
          </div>
          <div class="skill-card" data-skill="AI Training" data-level="75" data-projects="EloSystem">
            <div class="skill-header">
              <span class="skill-name">AI Training</span>
              <span class="skill-level">75%</span>
            </div>
            <div class="skill-progress">
              <div class="progress-bar" data-progress="75"></div>
            </div>
            <div class="skill-projects">
              <small>Applied in: EloSystem</small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<section id="highlight-projects" class="highlighted-fade-in">
  <h2 class="section-title">Highlighted Projects</h2>

  <div class="highlight-carousel">
    <div class="carousel-track">
      <div class="highlight-node">
        <h3>SwipeToAdopt</h3>
        <p>A Rust + React pet adoption app with Tinder-style UI used by 50+ users during pilot.</p>
        <ul class="flow-tools">
          <li>Rust</li>
          <li>React</li>
          <li>Axum</li>
          <li>Petfinder API</li>
          <li>Infinite Scrolling</li>
        </ul>
        <a href="https://swipetoadopt.org" target="_blank" class="highlight-btn">Visit Site</a>
      </div>

      <div class="highlight-node">
        <h3>AI Trainer</h3>
        <p>Gamified fitness dashboard that boosted retention 30% with task leveling.</p>
        <ul class="flow-tools">
          <li>React</li>
          <li>Firebase</li>
          <li>Auth</li>
          <li>Gamification</li>
          <li>Leveling UX</li>
        </ul>
        <a href="https://github.com/AspireVenom/AI_Trainer" target="_blank" class="highlight-btn">View GitHub</a>
      </div>

      <div class="highlight-node">
        <h3>EloSystem</h3>
        <p>ML-powered Elo ratings with 72% prediction accuracy across 1,500+ MLB games.</p>
        <ul class="flow-tools">
          <li>Python</li>
          <li>PyTorch</li>
          <li>Matplotlib</li>
          <li>Elo Algorithms</li>
          <li>ML Model Tuning</li>
        </ul>
        <a href="https://github.com/AspireVenom/EloSystem" target="_blank" class="highlight-btn">View GitHub</a>
      </div>

      <div class="highlight-node">
        <h3>SMS Automator</h3>
        <p>Automated 500+ reminders using Python scripts, saving 20+ hours/month.</p>
        <ul class="flow-tools">
          <li>Python</li>
          <li>Twilio API</li>
          <li>CRON Jobs</li>
          <li>Text Templates</li>
          <li>Async Scheduling</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="carousel-controls">
    <button id="carousel-prev" class="carousel-button">← Prev</button>
    <button id="carousel-next" class="carousel-button">Next →</button>
  </div>
</section>

</section>
<section id="projects">
  <h2 data-aos="fade-up">Projects</h2>
  <div class="project-scroll-wrapper">
    <div class="project-grid">
      <% projects.forEach(project => { %>
        <div class="project-card">
          <h3><a href="<%= project.url %>" target="_blank"><%= project.name %></a></h3>
          <p><%= project.description %></p>
          <div class="project-meta">
            <% if (project.language) { %>
              <span><i class="fas fa-code"></i> <%= project.language %></span>
            <% } %>
            <span><i class="fas fa-star"></i> <%= project.stars %></span>
            <span><i class="fas fa-code-branch"></i> <%= project.forks %></span>
          </div>
        </div>
      <% }) %>
    </div>
  </div>
</section>

<%- include('partials/footer') %>

<!-- Snake Game Modal (hidden by default) -->
<div id="snake-modal" style="display:none; position:fixed; top:0; left:0; width:100vw; height:100vh; background:rgba(10,20,20,0.97); z-index:9999; align-items:center; justify-content:center; flex-direction:column;">
  <button id="snake-close" style="position:absolute; top:2rem; right:2rem; font-size:2rem; background:none; border:none; color:#00ff00; cursor:pointer;">&times;</button>
  <h2 style="color:#00ff00; margin-bottom:1rem;">🐍 Snake Game</h2>
  <canvas id="snake-canvas" width="400" height="400" style="background:#111; border:2px solid #00ff00; border-radius:12px; max-width:90vw; height:auto;"></canvas>
  <div id="snake-dpad" style="display:flex; flex-direction:column; align-items:center; margin-top:1.2rem; gap:0.3rem;">
    <div style="display:flex; justify-content:center; gap:1.2rem;">
      <button class="snake-dpad-btn" data-direction="up" aria-label="Up">▲</button>
    </div>
    <div style="display:flex; justify-content:center; gap:1.2rem;">
      <button class="snake-dpad-btn" data-direction="left" aria-label="Left">◀</button>
      <button class="snake-dpad-btn" data-direction="down" aria-label="Down">▼</button>
      <button class="snake-dpad-btn" data-direction="right" aria-label="Right">▶</button>
    </div>
  </div>
  <p style="color:#b6fcd5; margin-top:1rem;">Use arrow keys, WASD, swipe, or tap the arrows. Press Esc or × to close.</p>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>
<script>AOS.init();</script>

<!-- Scripts: Restore animated terminal intro -->
<script>
document.addEventListener("DOMContentLoaded", () => {
  // Terminal typing animation
  const isMobile = window.innerWidth <= 768;
  const intro = document.querySelector(".intro");
  const cursor = document.getElementById("cursor");

  function moveCursorTo(el) {
    const rect = el.getBoundingClientRect();
    const introRect = intro.getBoundingClientRect();
    cursor.style.top = `${rect.top - introRect.top}px`;
    cursor.style.left = `${rect.left - introRect.left + rect.width + 2}px`;
  }

  if (!isMobile) {
    const line1 = document.getElementById("line1");
    const line2 = document.getElementById("line2");
    const line2Container = document.getElementById("line2-container");
    const line1Text = "Douglas Alvarino";
    const line2Text = "Engineer | Developer | Explorer";
    let i = 0, j = 0;

    function typeLine1() {
      if (i < line1Text.length) {
        line1.textContent += line1Text.charAt(i);
        moveCursorTo(line1);
        i++;
        setTimeout(typeLine1, 80);
      } else {
        // Let CSS animate line2Container in
        setTimeout(typeLine2, 400);
      }
    }

    function typeLine2() {
      if (j < line2Text.length) {
        line2.textContent += line2Text.charAt(j);
        moveCursorTo(line2);
        j++;
        setTimeout(typeLine2, 80);
      }
    }

    setTimeout(typeLine1, 350); // Small delay for drama
  } else {
    // Mobile: Show four lines, each with its own prompt and span, and animate the prompt >
    const intro = document.querySelector(".intro");
    const cursor = document.getElementById("cursor");
    // Remove the two static lines
    document.getElementById("line1-container").remove();
    document.getElementById("line2-container").remove();
    // Define the four lines
    const mobileLines = ["Douglas Alvarino", "Engineer", "Developer", "Explorer"];
    let currentLine = 0;
    let charIndex = 0;
    let lineSpans = [];
    let promptSpans = [];

    // Create four terminal-line elements, but don't show the prompt initially
    for (let i = 0; i < mobileLines.length; i++) {
      const lineDiv = document.createElement("div");
      lineDiv.className = "terminal-line";
      const promptSpan = document.createElement("span");
      promptSpan.className = "prompt";
      promptSpan.textContent = ""; // Will animate in
      promptSpans.push(promptSpan);
      const span = document.createElement("span");
      span.id = `mobile-line-${i}`;
      lineSpans.push(span);
      lineDiv.appendChild(promptSpan);
      lineDiv.appendChild(span);
      intro.insertBefore(lineDiv, cursor);
    }

    function typeMobileLine() {
      if (currentLine >= mobileLines.length) return;
      const prompt = promptSpans[currentLine];
      const span = lineSpans[currentLine];
      const text = mobileLines[currentLine];
      // Step 1: Animate the prompt '>'
      function typePrompt() {
        prompt.textContent = "> ";
        moveCursorTo(prompt);
        setTimeout(typeWord, 180);
      }
      // Step 2: Animate the word
      function typeWord() {
        if (charIndex < text.length) {
          span.textContent += text.charAt(charIndex);
          moveCursorTo(span);
          charIndex++;
          setTimeout(typeWord, 80);
        } else {
          currentLine++;
          charIndex = 0;
          setTimeout(typeMobileLine, 300);
        }
      }
      typePrompt();
    }
    setTimeout(typeMobileLine, 350);
  }

  // Scroll cue
  const cue = document.getElementById("scroll-cue");
  const aboutSection = document.getElementById("about");
  let scrolled = false;

  function scrollToAbout() {
    if (!scrolled) {
      scrolled = true;
      aboutSection.scrollIntoView({ behavior: "smooth" });
    }
  }

  cue.addEventListener("click", scrollToAbout);
  window.addEventListener("wheel", (e) => {
    if (e.deltaY > 0) scrollToAbout();
  });
});
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const skillsCarousel = document.getElementById('skills-carousel');
    const skillsCategories = document.getElementById('skills-categories');
    const carouselWrapper = document.querySelector('.carousel-skill-card-wrapper');
    const leftArrow = document.getElementById('carousel-left');
    const rightArrow = document.getElementById('carousel-right');
    const filterBar = document.getElementById('skills-filter');
    const filterButtons = Array.from(document.querySelectorAll('.filter-btn'));
  
    let allSkillCards = Array.from(document.querySelectorAll('.skill-card')).map(card => card.cloneNode(true));
    let carouselIndex = 0;
  
    function showCarouselSkill(idx) {
      carouselWrapper.innerHTML = '';
      const card = allSkillCards[idx];
      if (card) {
        carouselWrapper.appendChild(card);
        const progressBar = card.querySelector('.progress-bar');
        const progress = card.dataset.level;
        progressBar.style.setProperty('--progress-width', `${progress}%`);
        card.classList.add('animate');
        setTimeout(() => {
          progressBar.style.width = `${progress}%`;
        }, 100);
      }
      leftArrow.disabled = idx === 0;
      rightArrow.disabled = idx === allSkillCards.length - 1;
    }
  
    function activateCarousel() {
      allSkillCards = Array.from(document.querySelectorAll('.skill-card')).map(card => card.cloneNode(true));
      skillsCarousel.style.display = '';
      skillsCategories.classList.add('hide');
      carouselIndex = 0;
      showCarouselSkill(carouselIndex);
    }
  
    function deactivateCarousel() {
      skillsCarousel.style.display = 'none';
      skillsCategories.classList.remove('hide');
    }
  
    leftArrow.addEventListener('click', () => {
      if (carouselIndex > 0) {
        carouselIndex--;
        showCarouselSkill(carouselIndex);
      }
    });
  
    rightArrow.addEventListener('click', () => {
      if (carouselIndex < allSkillCards.length - 1) {
        carouselIndex++;
        showCarouselSkill(carouselIndex);
      }
    });
  
    // Swipe for skills carousel
    let skillsStartX = 0;
    let skillsSwiping = false;
  
    carouselWrapper.addEventListener('touchstart', (e) => {
      skillsStartX = e.touches[0].clientX;
      skillsSwiping = true;
    });
  
    carouselWrapper.addEventListener('touchmove', (e) => {
      if (!skillsSwiping) return;
      const diffX = e.touches[0].clientX - skillsStartX;
      if (Math.abs(diffX) > 50) {
        if (diffX < 0 && carouselIndex < allSkillCards.length - 1) {
          carouselIndex++;
          showCarouselSkill(carouselIndex);
        } else if (diffX > 0 && carouselIndex > 0) {
          carouselIndex--;
          showCarouselSkill(carouselIndex);
        }
        skillsSwiping = false;
      }
    });
  
    carouselWrapper.addEventListener('touchend', () => {
      skillsSwiping = false;
    });
  
    // Filter button logic
    filterBar.addEventListener('click', (e) => {
      if (!e.target.classList.contains('filter-btn')) return;
      const selected = e.target;
      filterButtons.forEach(btn => btn.classList.remove('active'));
      selected.classList.add('active');
  
      const filter = selected.dataset.filter;
      if (filter === 'all') {
        activateCarousel();
      } else {
        deactivateCarousel();
        document.querySelectorAll('.skill-category').forEach(cat => {
          cat.style.display = cat.dataset.category === filter ? '' : 'none';
        });
        // Animate progress bars for visible skill cards
        document.querySelectorAll('.skill-category').forEach(cat => {
          if (cat.style.display !== 'none') {
            cat.querySelectorAll('.skill-card').forEach(card => {
              const progressBar = card.querySelector('.progress-bar');
              const progress = card.dataset.level;
              progressBar.style.width = '0%'; // Reset
              progressBar.style.setProperty('--progress-width', `${progress}%`);
              card.classList.remove('animate'); // Reset animation
              // Force reflow to restart animation
              void progressBar.offsetWidth;
              card.classList.add('animate');
              setTimeout(() => {
                progressBar.style.width = `${progress}%`;
              }, 100);
            });
          }
        });
      }
    });
  
    // Automatically apply the Programming filter on page load
    const programmingBtn = filterButtons.find(btn => btn.dataset.filter === 'programming');
    if (programmingBtn) {
      setTimeout(() => programmingBtn.click(), 0);
    }
  
    // Highlight Projects Carousel
    const track = document.querySelector(".carousel-track");
    const nodes = document.querySelectorAll(".highlight-node");
    const prevBtn = document.getElementById("carousel-prev");
    const nextBtn = document.getElementById("carousel-next");
    let currentIndex = 0;
  
    function updateCarousel() {
      const offset = currentIndex * -100;
      track.style.transform = `translateX(${offset}%)`;
    }
  
    prevBtn.addEventListener("click", () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
  
    nextBtn.addEventListener("click", () => {
      if (currentIndex < nodes.length - 1) {
        currentIndex++;
        updateCarousel();
      }
    });
  
    let projectStartX = 0;
    let projectSwiping = false;
  
    track.addEventListener("touchstart", (e) => {
      projectStartX = e.touches[0].clientX;
      projectSwiping = true;
    });
  
    track.addEventListener("touchmove", (e) => {
      if (!projectSwiping) return;
      const diffX = e.touches[0].clientX - projectStartX;
      if (Math.abs(diffX) > 50) {
        if (diffX < 0 && currentIndex < nodes.length - 1) {
          currentIndex++;
        } else if (diffX > 0 && currentIndex > 0) {
          currentIndex--;
        }
        updateCarousel();
        projectSwiping = false;
      }
    });
  
    track.addEventListener("touchend", () => {
      projectSwiping = false;
    });
  
    // Init
    activateCarousel();
    updateCarousel();
  });
  </script>
  
<script>
document.addEventListener("DOMContentLoaded", () => {
  const hamburger = document.getElementById('hamburger');
  const navLinks = document.getElementById('nav-links');
  if (hamburger && navLinks) {
    hamburger.addEventListener('click', () => {
      hamburger.classList.toggle('active');
      navLinks.classList.toggle('show');
    });
    // Close menu when a link is clicked (on mobile)
    navLinks.querySelectorAll('a').forEach(link => {
      link.addEventListener('click', () => {
        if (window.innerWidth <= 768) {
          navLinks.classList.remove('show');
          hamburger.classList.remove('active');
        }
      });
    });
  }
});
</script>

<script>
// Snake Game Easter Egg
(function() {
  const logo = document.getElementById('navbar-logo');
  const modal = document.getElementById('snake-modal');
  const closeBtn = document.getElementById('snake-close');
  const canvas = document.getElementById('snake-canvas');
  const ctx = canvas.getContext('2d');
  let clickCount = 0;
  let clickTimer = null;
  let gameInterval = null;
  let snake, direction, food, score, gameOver, pendingDir;

  function showModal() {
    modal.classList.add('active');
    modal.style.display = 'flex';
    startGame();
    document.body.style.overflow = 'hidden';
  }
  function hideModal() {
    modal.classList.remove('active');
    setTimeout(() => { modal.style.display = 'none'; }, 300);
    stopGame();
    document.body.style.overflow = '';
  }

  // Easter egg trigger: 3 clicks in 2 seconds
  logo.addEventListener('click', () => {
    clickCount++;
    if (clickCount === 1) {
      clickTimer = setTimeout(() => { clickCount = 0; }, 2000);
    }
    if (clickCount === 3) {
      clearTimeout(clickTimer);
      clickCount = 0;
      showModal();
    }
  });
  closeBtn.addEventListener('click', hideModal);
  window.addEventListener('keydown', (e) => {
    if (modal.classList.contains('active') && (e.key === 'Escape' || e.key === 'Esc')) {
      hideModal();
    }
  });
  modal.addEventListener('click', (e) => {
    if (e.target === modal) hideModal();
  });

  // --- Swipe gesture support ---
  let touchStartX = null, touchStartY = null;
  canvas.addEventListener('touchstart', function(e) {
    if (e.touches.length === 1) {
      touchStartX = e.touches[0].clientX;
      touchStartY = e.touches[0].clientY;
    }
  });
  canvas.addEventListener('touchend', function(e) {
    if (touchStartX === null || touchStartY === null) return;
    const dx = e.changedTouches[0].clientX - touchStartX;
    const dy = e.changedTouches[0].clientY - touchStartY;
    if (Math.abs(dx) > Math.abs(dy)) {
      // Horizontal swipe
      if (dx > 30) pendingDir = {x: 1, y: 0}; // right
      else if (dx < -30) pendingDir = {x: -1, y: 0}; // left
    } else {
      // Vertical swipe
      if (dy > 30) pendingDir = {x: 0, y: 1}; // down
      else if (dy < -30) pendingDir = {x: 0, y: -1}; // up
    }
    touchStartX = null;
    touchStartY = null;
  });

  // Snake Game Implementation
  function startGame() {
    snake = [{x: 10, y: 10}];
    direction = {x: 1, y: 0};
    pendingDir = null;
    food = {x: Math.floor(Math.random()*20), y: Math.floor(Math.random()*20)};
    score = 0;
    gameOver = false;
    draw();
    if (gameInterval) clearInterval(gameInterval);
    gameInterval = setInterval(gameLoop, 100);
    window.addEventListener('keydown', handleKey);
  }
  function stopGame() {
    clearInterval(gameInterval);
    window.removeEventListener('keydown', handleKey);
  }
  function handleKey(e) {
    const key = e.key.toLowerCase();
    if (key === 'arrowup' || key === 'w') pendingDir = {x: 0, y: -1};
    if (key === 'arrowdown' || key === 's') pendingDir = {x: 0, y: 1};
    if (key === 'arrowleft' || key === 'a') pendingDir = {x: -1, y: 0};
    if (key === 'arrowright' || key === 'd') pendingDir = {x: 1, y: 0};
  }
  function gameLoop() {
    if (pendingDir) {
      // Prevent reversing
      if (!(pendingDir.x === -direction.x && pendingDir.y === -direction.y)) {
        direction = pendingDir;
      }
      pendingDir = null;
    }
    const head = {x: snake[0].x + direction.x, y: snake[0].y + direction.y};
    // Wall collision
    if (head.x < 0 || head.x >= 20 || head.y < 0 || head.y >= 20) return endGame();
    // Self collision
    if (snake.some(seg => seg.x === head.x && seg.y === head.y)) return endGame();
    snake.unshift(head);
    // Food
    if (head.x === food.x && head.y === food.y) {
      score++;
      food = {x: Math.floor(Math.random()*20), y: Math.floor(Math.random()*20)};
    } else {
      snake.pop();
    }
    draw();
  }
  function endGame() {
    gameOver = true;
    clearInterval(gameInterval);
    ctx.fillStyle = '#111';
    ctx.globalAlpha = 0.85;
    ctx.fillRect(0, 0, 400, 400);
    ctx.globalAlpha = 1;
    ctx.fillStyle = '#ff4444';
    ctx.font = 'bold 2rem monospace';
    ctx.textAlign = 'center';
    ctx.fillText('Game Over', 200, 180);
    ctx.fillStyle = '#00ff00';
    ctx.font = '1.2rem monospace';
    ctx.fillText('Score: ' + score, 200, 220);
    ctx.font = '1rem monospace';
    ctx.fillText('Press Esc or × to close', 200, 260);
  }
  function draw() {
    ctx.clearRect(0, 0, 400, 400);
    // Draw grid
    ctx.strokeStyle = '#222';
    for (let i = 0; i <= 20; i++) {
      ctx.beginPath();
      ctx.moveTo(i*20, 0); ctx.lineTo(i*20, 400);
      ctx.moveTo(0, i*20); ctx.lineTo(400, i*20);
      ctx.stroke();
    }
    // Draw food
    ctx.fillStyle = '#00ff00';
    ctx.fillRect(food.x*20, food.y*20, 20, 20);
    // Draw snake
    for (let i = 0; i < snake.length; i++) {
      ctx.fillStyle = i === 0 ? '#fff' : '#00b300';
      ctx.fillRect(snake[i].x*20, snake[i].y*20, 20, 20);
    }
    // Draw score
    ctx.fillStyle = '#b6fcd5';
    ctx.font = '1rem monospace';
    ctx.textAlign = 'left';
    ctx.fillText('Score: ' + score, 10, 25);
  }
})();
</script>

</body>
</html>
